{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/gabi/Desktop/Projects/CodeCool_Projects/Team_Projects/Advanced-Java/jobifyProject/jobifyFrontend/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { JobContext } from \"./JobsContext\";\nimport Loading from \"./Loading\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nconst CardLinks = styled(Link)`\n  color: black;\n  text-decoration: none;\n  :hover {\n    color: #00b3e2;\n    text-decoration: none;\n  }\n`;\n_c = CardLinks;\nexport default function SearchBar() {\n  _s();\n\n  const {\n    jobs,\n    loading\n  } = useContext(JobContext);\n  const [isLoading] = loading;\n  const [loadedJobs] = jobs;\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const [searchResults, setSearchResults] = React.useState([]);\n\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  const displayJobs = array => {\n    return array.map(job => /*#__PURE__*/_jsxDEV(CardLinks, {\n      to: \"/job/\" + job.id,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.company_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, job.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this));\n  };\n\n  React.useEffect(() => {\n    const results = loadedJobs.filter(job => job.title.toString().toLowerCase().includes(searchTerm.toLowerCase()));\n    setSearchResults(results);\n  }, [searchTerm, loadedJobs]);\n\n  const search = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control form-control-sm\",\n        placeholder: \"Search by job title\",\n        onChange: handleChange,\n        value: searchTerm,\n        type: \"text\",\n        name: \"search-job\",\n        style: {\n          width: \"20%\",\n          margin: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n\n  const content = isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards\",\n    children: searchResults.length > 0 ? displayJobs(searchResults) : displayJobs(loadedJobs)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [search, content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchBar, \"Ml2Jbu/2Wf24dBg9PI/byDvm674=\");\n\n_c2 = SearchBar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardLinks\");\n$RefreshReg$(_c2, \"SearchBar\");","map":{"version":3,"sources":["/home/gabi/Desktop/Projects/CodeCool_Projects/Team_Projects/Advanced-Java/jobifyProject/jobifyFrontend/src/components/SearchBar.js"],"names":["React","useContext","JobContext","Loading","Link","styled","CardLinks","SearchBar","jobs","loading","isLoading","loadedJobs","searchTerm","setSearchTerm","useState","searchResults","setSearchResults","handleChange","event","target","value","displayJobs","array","map","job","id","name","company_name","useEffect","results","filter","title","toString","toLowerCase","includes","search","width","margin","content","length"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { JobContext } from \"./JobsContext\";\nimport Loading from \"./Loading\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst CardLinks = styled(Link)`\n  color: black;\n  text-decoration: none;\n  :hover {\n    color: #00b3e2;\n    text-decoration: none;\n  }\n`;\n\nexport default function SearchBar() {\n  const { jobs, loading } = useContext(JobContext);\n  const [isLoading] = loading;\n  const [loadedJobs] = jobs;\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const [searchResults, setSearchResults] = React.useState([]);\n\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const displayJobs = (array) => {\n    return array.map((job) => (\n      <CardLinks key={job.id} to={\"/job/\" + job.id}>\n        <div className=\"card\">\n          {/* <h6 style={{ width: \"50%\" }}>{job.company}</h6> */}\n          {/* <img src={job.company_logo} alt=\"\" /> */}\n          <strong>\n            <p>{job.name}</p>\n            <p>{job.company_name}</p>\n          </strong>\n          {/* <p>Location: {job.location}</p> */}\n          {/* <p>\n            Job type: <strong style={{ color: \"green\" }}>{job.type}</strong>\n          </p> */}\n        </div>\n      </CardLinks>\n    ));\n  };\n\n  React.useEffect(() => {\n    const results = loadedJobs.filter((job) =>\n      job.title.toString().toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    setSearchResults(results);\n  }, [searchTerm, loadedJobs]);\n\n  const search = (\n    <div>\n      <form className=\"\">\n        <input\n          className=\"form-control form-control-sm\"\n          placeholder=\"Search by job title\"\n          onChange={handleChange}\n          value={searchTerm}\n          type=\"text\"\n          name=\"search-job\"\n          style={{ width: \"20%\", margin: \"auto\" }}\n        ></input>\n      </form>\n    </div>\n  );\n\n  const content = isLoading ? (\n    <Loading />\n  ) : (\n    <div className=\"cards\">\n      {searchResults.length > 0\n        ? displayJobs(searchResults)\n        : displayJobs(loadedJobs)}\n    </div>\n  );\n\n  return (\n    <React.Fragment>\n      {search}\n      {content}\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}